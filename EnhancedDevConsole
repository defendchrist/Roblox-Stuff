-- Roblox DevConsole click-to-copy injector with full persistence, instance replacement, and original color preservation
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")

-- Unique identifier for this script instance
local SCRIPT_ID = "ConsoleEnhancer_" .. tostring(math.random(100000, 999999))

-- Stop any existing instance
local function stopOldInstance()
    local oldInstanceId = CoreGui:FindFirstChild("ConsoleEnhancerInstanceId")
    if oldInstanceId and oldInstanceId:IsA("StringValue") then
        if oldInstanceId.Value ~= SCRIPT_ID then
            oldInstanceId.Value = "STOP"
            task.wait(0.1)
        end
        oldInstanceId:Destroy() -- Ensure old instance is fully removed
    end
end

-- Create or update instance ID
local function setInstanceId()
    local instanceId = Instance.new("StringValue")
    instanceId.Name = "ConsoleEnhancerInstanceId"
    instanceId.Value = SCRIPT_ID
    instanceId.Parent = CoreGui
    return instanceId
end

-- Enhance log items
local function enhanceLog(logItem, processed)
    if processed[logItem] then return end
    local msg = logItem:FindFirstChild("msg")
    if msg and msg:IsA("TextLabel") then
        processed[logItem] = true
        local originalColor = msg.TextColor3
        msg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                pcall(setclipboard, msg.Text)
                pcall(StarterGui.SetCore, StarterGui, "SendNotification", {
                    Title = "Copied!",
                    Text = "Log copied: " .. msg.Text:sub(1, 50) .. (#msg.Text > 50 and "..." or ""),
                    Duration = 2
                })
            end
        end)
        msg.MouseEnter:Connect(function()
            msg.TextColor3 = Color3.fromRGB(255, 0, 0)
        end)
        msg.MouseLeave:Connect(function()
            msg.TextColor3 = originalColor
        end)
        msg.Selectable = true
    end
end

-- Process logs in ClientLog
local function processLogs(clientLog, processed)
    for _, item in pairs(clientLog:GetChildren()) do
        if item:IsA("Frame") and not processed[item] then
            enhanceLog(item, processed)
        end
    end
end

-- Monitor DevConsole for ClientLog
local function monitorConsole(instanceId)
    local lastClientLog, processed, connection = nil, {}, nil
    while instanceId.Value == SCRIPT_ID do
        local console = CoreGui:FindFirstChild("DevConsoleMaster")
        if console then
            local window = console:FindFirstChild("DevConsoleWindow")
            local ui = window and window:FindFirstChild("DevConsoleUI")
            local mainView = ui and ui:FindFirstChild("MainView")
            local clientLog = mainView and mainView:FindFirstChild("ClientLog")
            
            if clientLog and clientLog ~= lastClientLog then
                processLogs(clientLog, processed)
                if connection then connection:Disconnect() end
                connection = clientLog.ChildAdded:Connect(function(child)
                    if child:IsA("Frame") then
                        task.wait(0.01)
                        enhanceLog(child, processed)
                    end
                end)
                lastClientLog = clientLog
            elseif clientLog then
                processLogs(clientLog, processed)
            end
        else
            if connection then connection:Disconnect() end
            lastClientLog, connection = nil, nil
        end
        task.wait(1) -- Reduced frequency to avoid spam
    end
end

-- Main execution
stopOldInstance()
local instanceId = setInstanceId()
spawn(function()
    local ok, err = pcall(function() monitorConsole(instanceId) end)
    if not ok then warn("Monitor error: " .. err) end
end)
print("Console Enhancement activated - Instance ID: " .. SCRIPT_ID)
